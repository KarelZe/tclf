[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name = "otc"
authors = [
  { name="Markus Bilz", email="github@markusbilz.com" },
]
description = "Code to perform option trade classification using machine learning."
readme = "README.md"
license = {file = "LICENSE.txt"}
requires-python = ">=3.8"
classifiers = [
  "Development Status :: 3 - Alpha",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Framework :: Jupyter",
  "Operating System :: OS Independent",
]

dependencies = [
  "numpy",
  "pandas",
  "scikit-learn"
]


dynamic = ["version"]

[project.urls]
"Homepage" = "https://github.com/KarelZe/thesis"
"Bug Tracker" = "https://github.com/KarelZe/thesis/issues"

[tool.mypy]
# https://github.com/python/mypy/issues/2410
ignore_missing_imports = true
disallow_untyped_defs = true
disallow_untyped_calls = true
disallow_incomplete_defs = true

[project.optional-dependencies]
dev=[
    "build",
    "mypy",
    "pre-commit",
    "ruff",
]

doc = [
    "mkdocs >=1.1.2,<2.0.0",
    "mkdocs-material >=8.1.4,<9.0.0",
    "mkdocstrings-python",
    "mdx-include >=1.4.1,<2.0.0",
    "pillow >=9.3.0,<10.0.0",
    "cairosvg >=2.5.2,<3.0.0",
]

test = ["pytest",
    "pytest-cov",
  ]


[tool.pytest.ini_options]
minversion = 7.0
addopts = "-ra -p no:warnings -v --cov --cov-report term-missing --doctest-modules"
pythonpath = ["src"]
testpaths = ["tests"]

[tool.coverage.run]
omit = [
    "debug_*.py",
    "tclf/tests/*",
]
branch = true

[tool.coverage.report]
exclude_also = [
    "def __repr__",
    "if self\\.debug",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "@(abc\\.)?abstractmethod",
    "if self.verbose:"
    ]
show_missing = true


[tool.ruff]
# See rules: https://beta.ruff.rs/docs/rules/
select = [
    "C",    # flake8-comprehensions
    "D",    # pydocstyle
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "NPY",  # numpy
    "PD",   # pandas-vet
    "PIE",  # misc lints
    "PT",   # pytest
    "PTH",  # flake8-use-pathlib
    "PGH",  # pygrep
    "RET",  # return
    "RUF",  # ruff-specific rules
    "UP",   # pyupgrade
    "SIM",  # flake8-simplify
    "W",    # pycodestyle warnings
]

include = ["*.py", "*.pyi", "**/pyproject.toml", "*.ipynb"]

ignore = [
    "E501",  # line too long, handled by black
    "N803",  # argument name should be lowercase
    "N806",  # variable name should be lowercase
    "C901",  # too complex
    "D206",  # indent with white space
    "W191",  # tab identation
]

[tool.ruff.isort]
known-first-party = ["tclf"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.ruff.per-file-ignores]
"__init__.py" = ["D104", "F401"]  # disable missing docstrings in __init__, unused imports

[tool.ruff.pydocstyle]
convention = "google"